from integrations.CirclSearchIntegration import CirclSearchIntegration
from models.CveInformationModels import *

class CveInformationService:
    def __init__(self):
        self.circl_integration = CirclSearchIntegration()

    def get_cve_information(self, cve_id: str):
        data = self.circl_integration.get_cve_information(cve_id)
        print(data)
        if data is None:
            return data

        cve_information_model = self.__mapper_cve_information(data)
        cvss_vector_missing = self.__valid_cvss(cve_information_model.cvss_vector)

        if cvss_vector_missing is None:
            return cve_information_model
        else:
            cve_information_model.missing_cvss_params = cvss_vector_missing
            cve_information_model.cvss = 'missing parameters'
            return cve_information_model

    def __valid_cvss(self, cvss_vector):
        basic = [
            {'key': 'AV', 'title': 'Access Vector', 'options': [
                {'key': 'L', 'title': 'Local'},
                {'key': 'A', 'title': 'Adjacent'},
                {'key': 'N', 'title': 'Network'}
            ]},
            {'key': 'AC', 'title': 'Access Complexity', 'options': [
                {'key': 'L', 'title': 'Low'},
                {'key': 'M', 'title': 'Medium'},
                {'key': 'H', 'title': 'High'},
            ]},
            {'key': 'Au', 'title': 'Authentication', 'options': [
                {'key': 'N', 'title': 'None'},
                {'key': 'S', 'title': 'Single'},
                {'key': 'M', 'title': 'Multiple'}
            ]},
            {'key': 'C', 'title': 'Confidentiality Impact', 'options': [
                {'key': 'N', 'title': 'None'},
                {'key': 'P', 'title': 'Partial'},
                {'key': 'H', 'title': 'Complete'}
            ]},
            {'key': 'I', 'title': 'Integrity Impact', 'options': [
                {'key': 'N', 'title': 'None'},
                {'key': 'P', 'title': 'Partial'},
                {'key': 'H', 'title': 'Complete'}
            ]},
            {'key': 'A', 'title': 'Availability Impact', 'options': [
                {'key': 'N', 'title': 'None'},
                {'key': 'P', 'title': 'Partial'},
                {'key': 'H', 'title': 'Complete'}
            ]}
        ]

        temp =  [
            {'key': 'E', 'title': 'Exploitability', 'options': [
                {'key': 'ND', 'title': 'Not defined'},
                {'key': 'U', 'title': 'Unproven that exploit exists'},
                {'key': 'POC', 'title': 'Proof-of-concept code'},
                {'key': 'F', 'title': 'Functional exploit exists'},
                {'key': 'H', 'title': 'High'},
            ]},
            {'key': 'RL', 'title': 'Remediation Level', 'options': [
                {'key': 'ND', 'title': 'Not defined'},
                {'key': 'OF', 'title': 'Official Fix'},
                {'key': 'TF', 'title': 'Temporary Fix'},
                {'key': 'W', 'title': 'Workaround'},
                {'key': 'U', 'title': 'Unavailable'},
            ]},
            {'key': 'RC', 'title': 'Report Confidence', 'options': [
                {'key': 'ND', 'title': 'Not defined'},
                {'key': 'UC', 'title': 'Unconfirmed'},
                {'key': 'UR', 'title': 'Uncorroborated'},
                {'key': 'C', 'title': 'Confirmed'}
            ]}
        ]
        envi = [
            {'key': 'CR', 'title': 'Confidentiality Requirement', 'options': [
                {'key': 'ND', 'title': 'Not defined'},
                {'key': 'L', 'title': 'Low'},
                {'key': 'M', 'title': 'Medium'},
                {'key': 'H', 'title': 'High'}
            ]},
            {'key': 'IR', 'title': 'Integrity Requirement', 'options': [
                {'key': 'ND', 'title': 'Not defined'},
                {'key': 'L', 'title': 'Low'},
                {'key': 'M', 'title': 'Medium'},
                {'key': 'H', 'title': 'High'}
            ]},
            {'key': 'AR', 'title': 'Availability Requirement', 'options': [
                {'key': 'ND', 'title': 'Not defined'},
                {'key': 'L', 'title': 'Low'},
                {'key': 'M', 'title': 'Medium'},
                {'key': 'H', 'title': 'High'}
            ]},
            {'key': 'CDP', 'title': 'Collateral Damage Potential', 'options': [
                {'key': 'ND', 'title': 'Not defined'},
                {'key': 'N', 'title': 'None'},
                {'key': 'L', 'title': 'Low'},
                {'key': 'LM', 'title': 'Low-Medium'},
                {'key': 'MH', 'title': 'Medium-High'},
                {'key': 'H', 'title': 'High'}
            ]},
            {'key': 'TD', 'title': 'Target Distribution', 'options': [
                {'key': 'ND', 'title': 'Not defined'},
                {'key': 'N', 'title': 'None'},
                {'key': 'L', 'title': 'Low'},
                {'key': 'M', 'title': 'Medium'},
                {'key': 'H', 'title': 'High'}
            ]}
        ]
        missing_parameters_basic = []
        missing_parameters_temp = []
        missing_parameters_envi = []

        for param in basic:
            if param['key'] + ':' not in cvss_vector:
                missing_parameters_basic.append(param)

        for param in temp:
            if param['key'] + ':' not in cvss_vector:
                missing_parameters_temp.append(param)

        for param in envi:
            if param['key'] + ':' not in cvss_vector:
                missing_parameters_envi.append(param)

        if missing_parameters_envi or missing_parameters_temp or missing_parameters_basic:
            return MissingCvssParams(missing_parameters_basic, missing_parameters_temp, missing_parameters_envi)
        else:
            return None


    def __mapper_cve_information(self, data):
        id = data['id']
        access = self.__mapper_cve_access(data)
        publish = data['Published']
        resume = data['summary']
        cvss = float(data['cvss'])
        impact = self.__mapper_cve_impact(data)
        references = data['references']
        cvss_vector = data['cvss-vector']

        return CveInformationModel(id, access, publish, resume, cvss, impact, references, cvss_vector)


    def __mapper_cve_access(self, data):
        authentication = data['access']['authentication']
        complexity = data['access']['complexity']
        vector = data['access']['vector']

        return AccessModel(authentication, complexity, vector)

    def __mapper_cve_impact(self, data):
        availability = data['impact']['availability']
        confidentiality = data['impact']['confidentiality']
        integrity = data['impact']['integrity']

        return ImpactModel(availability, confidentiality, integrity)