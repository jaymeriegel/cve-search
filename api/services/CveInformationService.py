from integrations.CirclSearchIntegration import CirclSearchIntegration
from models.CveInformationModels import *

class CveInformationService:
    def __init__(self):
        self.circl_integration = CirclSearchIntegration()

    def get_cve_information(self, cve_id: str):
        data = self.circl_integration.get_cve_information(cve_id)

        if data is None:
            return data

        cve_information_model = self.__mapper_cve_information(data)
        cvss_vector_missing = self.__valid_cvss(cve_information_model.cvss_vector)

        if cvss_vector_missing is None:
            return cve_information_model
        else:
            cve_information_model.missing_cvss_params = cvss_vector_missing
            cve_information_model.cvss = 'missing parameters'
            return cve_information_model

    def __valid_cvss(self, cvss_vector):
        basic = ['AV','AC','PR', 'UI', 'S', 'C', 'I', 'A']
        temp =  ['E', 'RL', 'RC']
        envi = ['CR', 'IR', 'AR', 'MAV', 'MAC', 'MPR', 'MUI', 'MS', 'MC', 'MI', 'MA']
        missing_parameters_basic = []
        missing_parameters_temp = []
        missing_parameters_envi = []

        for param in basic:
            if param + ':' not in cvss_vector:
                missing_parameters_basic.append(param)

        for param in temp:
            if param + ':' not in cvss_vector:
                missing_parameters_temp.append(param)

        for param in envi:
            if param + ':' not in cvss_vector:
                missing_parameters_envi.append(param)

        if missing_parameters_envi or missing_parameters_temp or missing_parameters_basic:
            return MissingCvssParams(missing_parameters_basic, missing_parameters_temp, missing_parameters_envi)
        else:
            return None


    def __mapper_cve_information(self, data):
        id = data['id']
        access = self.__mapper_cve_access(data)
        publish = data['Published']
        resume = data['summary']
        cvss = float(data['cvss'])
        impact = self.__mapper_cve_impact(data)
        references = data['references']
        cvss_vector = data['cvss-vector']

        return CveInformationModel(id, access, publish, resume, cvss, impact, references, cvss_vector)


    def __mapper_cve_access(self, data):
        authentication = data['access']['authentication']
        complexity = data['access']['complexity']
        vector = data['access']['vector']
        
        return AccessModel(authentication, complexity, vector)
    
    def __mapper_cve_impact(self, data):
        availability = data['impact']['availability']
        confidentiality = data['impact']['confidentiality']
        integrity = data['impact']['integrity']
        
        return ImpactModel(availability, confidentiality, integrity)