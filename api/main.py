from services.CveInformationService import CveInformationService
from flask import Flask, jsonify, make_response, request
from flask_cors import CORS, cross_origin
from cvss import CVSS3
import jsonpickle

app = Flask(__name__)
cors = CORS(app)
app.config['CORS_HEADERS'] = 'Content-Type'

@app.route('/cve/<cveId>', methods=['GET'])
@cross_origin()
def api(cveId):
    service = CveInformationService()
    infos = service.get_cve_information(cveId)

    if infos is None:
        response = {
            "error": "CVE not found"
        }
        return make_response(jsonify(response), 404)

    return jsonpickle.encode(infos)

@app.route('/cve/calculate-cvss', methods=['POST'])
@cross_origin()
def calculateCvss():
    if 'cvss_vector' in request.json:
        cvss_vector = request.json['cvss_vector']

        try:
            cvss = CVSS3(cvss_vector)
            base_score, temporal_score, environmental_score = cvss.scores()
            base_severity, temporal_severity, environmental_severity = cvss.severities()

            response = {
                'cvss_vector': cvss_vector,
                'base_score': base_score,
                'temporal_score': temporal_score,
                'environmental_score': environmental_score,
                'base_severity': base_severity,
                'temporal_severity': temporal_severity,
                'environmental_severity': environmental_severity
            }
            return jsonify(response)
        except Exception:
            error_response = {'error': 'Malformed CVSS vector'}
            return jsonify(error_response), 400
    else:
        error_response = {'error': 'CVSS vector not provided'}
        return jsonify(error_response), 400

if __name__ == '__main__':
    app.run(debug=True)